// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 register's, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load, sel=address[3..5], a=r1, b=r2, c=r3, d=r4, e=r5, f=r6, g=r7, h=r8);
    RAM8(in=in, load=r1, address=address[0..2], out=m1);
    RAM8(in=in, load=r2, address=address[0..2], out=m2);
    RAM8(in=in, load=r3, address=address[0..2], out=m3);
    RAM8(in=in, load=r4, address=address[0..2], out=m4);
    RAM8(in=in, load=r5, address=address[0..2], out=m5);
    RAM8(in=in, load=r6, address=address[0..2], out=m6);
    RAM8(in=in, load=r7, address=address[0..2], out=m7);
    RAM8(in=in, load=r8, address=address[0..2], out=m8);
    Mux8Way16(a=m1, b=m2, c=m3, d=m4, e=m5, f=m6, g=m7, h=m8, sel=address[3..5], out=out);
}